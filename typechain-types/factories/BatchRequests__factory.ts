/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BatchRequests, BatchRequestsInterface } from "../BatchRequests";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "addAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "canBatchContractByIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "canBatchContracts",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakingContract",
            type: "address",
          },
          {
            internalType: "bool",
            name: "canBatch",
            type: "bool",
          },
        ],
        internalType: "struct Batch[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "contracts",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getAddressByIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "removeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sendWithdrawalRequests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610de88061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80634ba79dfe11610081578063a39fac121161005b578063a39fac12146101b5578063ce10cf88146101ca578063f2fde38b146101dd57600080fd5b80634ba79dfe1461017c578063715018a61461018f5780638da5cb5b1461019757600080fd5b806338eada1c116100b257806338eada1c1461011c578063474da79a1461012f5780634a4643c91461016757600080fd5b8063125ed16b146100ce57806337df07ee14610112575b600080fd5b6100e16100dc366004610bbb565b6101f0565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683529015156020830152015b60405180910390f35b61011a6102ef565b005b61011a61012a366004610bd4565b6104c0565b61014261013d366004610bbb565b6105bc565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610109565b61016f6105f3565b6040516101099190610c11565b61011a61018a366004610bd4565b6107a9565b61011a6108e4565b60005473ffffffffffffffffffffffffffffffffffffffff16610142565b6101bd610971565b6040516101099190610c78565b6101426101d8366004610bbb565b6109e0565b61011a6101eb366004610bd4565b610a1d565b6000806001838154811061020657610206610cd2565b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff909216918590811061023f5761023f610cd2565b60009182526020918290200154604080517fe0e8c021000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263e0e8c02192600480840193829003018186803b1580156102ae57600080fd5b505afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610d01565b91509150915091565b60005b6001548110156104bd57600073ffffffffffffffffffffffffffffffffffffffff166001828154811061032757610327610cd2565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161480159061040c57506001818154811061036557610365610cd2565b60009182526020918290200154604080517fe0e8c021000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263e0e8c02192600480840193829003018186803b1580156103d457600080fd5b505afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c9190610d01565b156104ab576001818154811061042457610424610cd2565b6000918252602082200154604080517f37df07ee000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926337df07ee9260048084019382900301818387803b15801561049257600080fd5b505af11580156104a6573d6000803e3d6000fd5b505050505b806104b581610d23565b9150506102f2565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600181815481106105cc57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015460609060009067ffffffffffffffff81111561061457610614610d83565b60405190808252806020026020018201604052801561065957816020015b60408051808201909152600080825260208201528152602001906001900390816106325790505b50905060005b6001548110156107a35760006001828154811061067e5761067e610cd2565b60009182526020918290200154604080517fe0e8c021000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263e0e8c02192600480840193829003018186803b1580156106ed57600080fd5b505afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190610d01565b905060405180604001604052806001848154811061074557610745610cd2565b6000918252602091829020015473ffffffffffffffffffffffffffffffffffffffff168252831515910152835184908490811061078457610784610cd2565b602002602001018190525050808061079b90610d23565b91505061065f565b50919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053d565b60005b6001548110156108e0578173ffffffffffffffffffffffffffffffffffffffff166001828154811061086157610861610cd2565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156108ce576001818154811061089c5761089c610cd2565b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b806108d881610d23565b91505061082d565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053d565b61096f6000610b46565b565b606060018054806020026020016040519081016040528092919081815260200182805480156109d657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116109ab575b5050505050905090565b6000600182815481106109f5576109f5610cd2565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053d565b73ffffffffffffffffffffffffffffffffffffffff8116610b41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161053d565b6104bd815b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610bcd57600080fd5b5035919050565b600060208284031215610be657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610c0a57600080fd5b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610c6b578151805173ffffffffffffffffffffffffffffffffffffffff1685528601511515868501529284019290850190600101610c2e565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610cc657835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610c94565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610d1357600080fd5b81518015158114610c0a57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220267df9cf2c76a843ccc1940a0c5fd16b49b2346f8d08273ff220419d1e527d1864736f6c63430008090033";

type BatchRequestsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchRequestsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchRequests__factory extends ContractFactory {
  constructor(...args: BatchRequestsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BatchRequests> {
    return super.deploy(overrides || {}) as Promise<BatchRequests>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BatchRequests {
    return super.attach(address) as BatchRequests;
  }
  connect(signer: Signer): BatchRequests__factory {
    return super.connect(signer) as BatchRequests__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchRequestsInterface {
    return new utils.Interface(_abi) as BatchRequestsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchRequests {
    return new Contract(address, _abi, signerOrProvider) as BatchRequests;
  }
}

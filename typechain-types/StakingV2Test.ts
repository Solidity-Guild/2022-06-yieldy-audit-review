/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RecipientStruct = {
  chainId: BigNumberish;
  cycle: BigNumberish;
  wallet: string;
  amount: BigNumberish;
};

export type RecipientStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & { chainId: BigNumber; cycle: BigNumber; wallet: string; amount: BigNumber };

export interface StakingV2TestInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "COW_RELAYER()": FunctionFragment;
    "COW_SETTLEMENT()": FunctionFragment;
    "CURVE_POOL()": FunctionFragment;
    "FEE_ADDRESS()": FunctionFragment;
    "LIQUIDITY_RESERVE()": FunctionFragment;
    "STAKING_TOKEN()": FunctionFragment;
    "TOKE_MANAGER()": FunctionFragment;
    "TOKE_POOL()": FunctionFragment;
    "TOKE_REWARD()": FunctionFragment;
    "TOKE_TOKEN()": FunctionFragment;
    "YIELDY_TOKEN()": FunctionFragment;
    "addRewardsForStakers(uint256,bool,bool)": FunctionFragment;
    "affiliateFee()": FunctionFragment;
    "canBatchTransactions()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claimFromTokemak((uint256,uint256,address,uint256),uint8,bytes32,bytes32)": FunctionFragment;
    "claimWithdraw(address)": FunctionFragment;
    "coolDownInfo(address)": FunctionFragment;
    "coolDownPeriod()": FunctionFragment;
    "curvePoolFrom()": FunctionFragment;
    "curvePoolTo()": FunctionFragment;
    "epoch()": FunctionFragment;
    "estimateInstantCurve(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address,uint256,uint256)": FunctionFragment;
    "instantUnstakeCurve(uint256,uint256)": FunctionFragment;
    "instantUnstakeReserve(uint256)": FunctionFragment;
    "isInstantUnstakingPaused()": FunctionFragment;
    "isStakingPaused()": FunctionFragment;
    "isUnstakingPaused()": FunctionFragment;
    "lastTokeCycleIndex()": FunctionFragment;
    "newFunction()": FunctionFragment;
    "owner()": FunctionFragment;
    "preSign(bytes)": FunctionFragment;
    "rebase()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestWithdrawalAmount()": FunctionFragment;
    "sendAffiliateFee(uint256)": FunctionFragment;
    "sendWithdrawalRequests()": FunctionFragment;
    "setAffiliateAddress(address)": FunctionFragment;
    "setAffiliateFee(uint256)": FunctionFragment;
    "setCoolDownPeriod(uint256)": FunctionFragment;
    "setCurvePool(address)": FunctionFragment;
    "setEpochDuration(uint256)": FunctionFragment;
    "setTimeLeftToRequestWithdrawal(uint256)": FunctionFragment;
    "setWarmUpPeriod(uint256)": FunctionFragment;
    "shouldPauseInstantUnstaking(bool)": FunctionFragment;
    "shouldPauseStaking(bool)": FunctionFragment;
    "shouldPauseUnstaking(bool)": FunctionFragment;
    "stake(uint256,address)": FunctionFragment;
    "timeLeftToRequestWithdrawal()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToke(address)": FunctionFragment;
    "unstake(uint256,bool)": FunctionFragment;
    "unstakeAllFromTokemak()": FunctionFragment;
    "warmUpInfo(address)": FunctionFragment;
    "warmUpPeriod()": FunctionFragment;
    "withdrawalAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COW_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COW_SETTLEMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURVE_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKE_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TOKE_POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKE_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YIELDY_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardsForStakers",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliateFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canBatchTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimFromTokemak",
    values: [RecipientStruct, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "coolDownInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "coolDownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePoolFrom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePoolTo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateInstantCurve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "instantUnstakeCurve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instantUnstakeReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInstantUnstakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUnstakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTokeCycleIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newFunction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "preSign", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAffiliateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendWithdrawalRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAffiliateAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAffiliateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoolDownPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurvePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeLeftToRequestWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWarmUpPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldPauseInstantUnstaking",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldPauseStaking",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldPauseUnstaking",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeLeftToRequestWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToke",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAllFromTokemak",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "warmUpInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "warmUpPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COW_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COW_SETTLEMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CURVE_POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FEE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKE_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKE_POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKE_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKE_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YIELDY_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardsForStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canBatchTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFromTokemak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coolDownInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coolDownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePoolFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePoolTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateInstantCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantUnstakeCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantUnstakeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInstantUnstakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnstakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTokeCycleIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preSign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendAffiliateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAffiliateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAffiliateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoolDownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurvePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeLeftToRequestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWarmUpPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldPauseInstantUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldPauseStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldPauseUnstaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeLeftToRequestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAllFromTokemak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warmUpInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warmUpPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAmount",
    data: BytesLike
  ): Result;

  events: {
    "LogSetAffiliateAddress(uint256,address)": EventFragment;
    "LogSetAffiliateFee(uint256,uint256)": EventFragment;
    "LogSetCoolDownPeriod(uint256,uint256)": EventFragment;
    "LogSetCurvePool(address,int128,int128)": EventFragment;
    "LogSetEpochDuration(uint256,uint256)": EventFragment;
    "LogSetPauseInstantUnstaking(uint256,bool)": EventFragment;
    "LogSetPauseStaking(uint256,bool)": EventFragment;
    "LogSetPauseUnstaking(uint256,bool)": EventFragment;
    "LogSetWarmUpPeriod(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogSetAffiliateAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetAffiliateFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetCoolDownPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetCurvePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetEpochDuration"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogSetPauseInstantUnstaking"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPauseStaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPauseUnstaking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetWarmUpPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogSetAffiliateAddressEvent = TypedEvent<
  [BigNumber, string],
  { blockNumber: BigNumber; affilateAddress: string }
>;

export type LogSetAffiliateAddressEventFilter =
  TypedEventFilter<LogSetAffiliateAddressEvent>;

export type LogSetAffiliateFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { blockNumber: BigNumber; fee: BigNumber }
>;

export type LogSetAffiliateFeeEventFilter =
  TypedEventFilter<LogSetAffiliateFeeEvent>;

export type LogSetCoolDownPeriodEvent = TypedEvent<
  [BigNumber, BigNumber],
  { blockNumber: BigNumber; period: BigNumber }
>;

export type LogSetCoolDownPeriodEventFilter =
  TypedEventFilter<LogSetCoolDownPeriodEvent>;

export type LogSetCurvePoolEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { curvePool: string; to: BigNumber; from: BigNumber }
>;

export type LogSetCurvePoolEventFilter = TypedEventFilter<LogSetCurvePoolEvent>;

export type LogSetEpochDurationEvent = TypedEvent<
  [BigNumber, BigNumber],
  { blockNumber: BigNumber; duration: BigNumber }
>;

export type LogSetEpochDurationEventFilter =
  TypedEventFilter<LogSetEpochDurationEvent>;

export type LogSetPauseInstantUnstakingEvent = TypedEvent<
  [BigNumber, boolean],
  { blockNumber: BigNumber; shouldPause: boolean }
>;

export type LogSetPauseInstantUnstakingEventFilter =
  TypedEventFilter<LogSetPauseInstantUnstakingEvent>;

export type LogSetPauseStakingEvent = TypedEvent<
  [BigNumber, boolean],
  { blockNumber: BigNumber; shouldPause: boolean }
>;

export type LogSetPauseStakingEventFilter =
  TypedEventFilter<LogSetPauseStakingEvent>;

export type LogSetPauseUnstakingEvent = TypedEvent<
  [BigNumber, boolean],
  { blockNumber: BigNumber; shouldPause: boolean }
>;

export type LogSetPauseUnstakingEventFilter =
  TypedEventFilter<LogSetPauseUnstakingEvent>;

export type LogSetWarmUpPeriodEvent = TypedEvent<
  [BigNumber, BigNumber],
  { blockNumber: BigNumber; period: BigNumber }
>;

export type LogSetWarmUpPeriodEventFilter =
  TypedEventFilter<LogSetWarmUpPeriodEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakingV2Test extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingV2TestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    COW_RELAYER(overrides?: CallOverrides): Promise<[string]>;

    COW_SETTLEMENT(overrides?: CallOverrides): Promise<[string]>;

    CURVE_POOL(overrides?: CallOverrides): Promise<[string]>;

    FEE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDITY_RESERVE(overrides?: CallOverrides): Promise<[string]>;

    STAKING_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    TOKE_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    TOKE_POOL(overrides?: CallOverrides): Promise<[string]>;

    TOKE_REWARD(overrides?: CallOverrides): Promise<[string]>;

    TOKE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    YIELDY_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    addRewardsForStakers(
      _amount: BigNumberish,
      _shouldTransfer: boolean,
      _trigger: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    affiliateFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    canBatchTransactions(overrides?: CallOverrides): Promise<[boolean]>;

    claim(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFromTokemak(
      _recipient: RecipientStruct,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWithdraw(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coolDownInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        credits: BigNumber;
        expiry: BigNumber;
      }
    >;

    coolDownPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    curvePoolFrom(overrides?: CallOverrides): Promise<[BigNumber]>;

    curvePoolTo(overrides?: CallOverrides): Promise<[BigNumber]>;

    epoch(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        duration: BigNumber;
        number: BigNumber;
        timestamp: BigNumber;
        endTime: BigNumber;
        distribute: BigNumber;
      }
    >;

    estimateInstantCurve(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _stakingToken: string,
      _yieldyToken: string,
      _tokeToken: string,
      _tokePool: string,
      _tokeManager: string,
      _tokeReward: string,
      _liquidityReserve: string,
      _feeAddress: string,
      _curvePool: string,
      _epochDuration: BigNumberish,
      _firstEpochEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instantUnstakeCurve(
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instantUnstakeReserve(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInstantUnstakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isStakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isUnstakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    lastTokeCycleIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    newFunction(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    preSign(
      orderUid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendAffiliateFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendWithdrawalRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAffiliateAddress(
      _affiliateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAffiliateFee(
      _affiliateFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCoolDownPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurvePool(
      _curvePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeLeftToRequestWithdrawal(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWarmUpPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldPauseInstantUnstaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldPauseStaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldPauseUnstaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeLeftToRequestWithdrawal(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToke(
      _claimAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _amount: BigNumberish,
      _trigger: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAllFromTokemak(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    warmUpInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        credits: BigNumber;
        expiry: BigNumber;
      }
    >;

    warmUpPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  COW_RELAYER(overrides?: CallOverrides): Promise<string>;

  COW_SETTLEMENT(overrides?: CallOverrides): Promise<string>;

  CURVE_POOL(overrides?: CallOverrides): Promise<string>;

  FEE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  LIQUIDITY_RESERVE(overrides?: CallOverrides): Promise<string>;

  STAKING_TOKEN(overrides?: CallOverrides): Promise<string>;

  TOKE_MANAGER(overrides?: CallOverrides): Promise<string>;

  TOKE_POOL(overrides?: CallOverrides): Promise<string>;

  TOKE_REWARD(overrides?: CallOverrides): Promise<string>;

  TOKE_TOKEN(overrides?: CallOverrides): Promise<string>;

  YIELDY_TOKEN(overrides?: CallOverrides): Promise<string>;

  addRewardsForStakers(
    _amount: BigNumberish,
    _shouldTransfer: boolean,
    _trigger: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  affiliateFee(overrides?: CallOverrides): Promise<BigNumber>;

  canBatchTransactions(overrides?: CallOverrides): Promise<boolean>;

  claim(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFromTokemak(
    _recipient: RecipientStruct,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWithdraw(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coolDownInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      credits: BigNumber;
      expiry: BigNumber;
    }
  >;

  coolDownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  curvePoolFrom(overrides?: CallOverrides): Promise<BigNumber>;

  curvePoolTo(overrides?: CallOverrides): Promise<BigNumber>;

  epoch(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      duration: BigNumber;
      number: BigNumber;
      timestamp: BigNumber;
      endTime: BigNumber;
      distribute: BigNumber;
    }
  >;

  estimateInstantCurve(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _stakingToken: string,
    _yieldyToken: string,
    _tokeToken: string,
    _tokePool: string,
    _tokeManager: string,
    _tokeReward: string,
    _liquidityReserve: string,
    _feeAddress: string,
    _curvePool: string,
    _epochDuration: BigNumberish,
    _firstEpochEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instantUnstakeCurve(
    _amount: BigNumberish,
    _minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instantUnstakeReserve(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInstantUnstakingPaused(overrides?: CallOverrides): Promise<boolean>;

  isStakingPaused(overrides?: CallOverrides): Promise<boolean>;

  isUnstakingPaused(overrides?: CallOverrides): Promise<boolean>;

  lastTokeCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

  newFunction(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  preSign(
    orderUid: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  sendAffiliateFee(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendWithdrawalRequests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAffiliateAddress(
    _affiliateAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAffiliateFee(
    _affiliateFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCoolDownPeriod(
    _vestingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurvePool(
    _curvePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeLeftToRequestWithdrawal(
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWarmUpPeriod(
    _vestingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldPauseInstantUnstaking(
    _shouldPause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldPauseStaking(
    _shouldPause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldPauseUnstaking(
    _shouldPause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256,address)"(
    _amount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeLeftToRequestWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToke(
    _claimAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _amount: BigNumberish,
    _trigger: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAllFromTokemak(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  warmUpInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      credits: BigNumber;
      expiry: BigNumber;
    }
  >;

  warmUpPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    COW_RELAYER(overrides?: CallOverrides): Promise<string>;

    COW_SETTLEMENT(overrides?: CallOverrides): Promise<string>;

    CURVE_POOL(overrides?: CallOverrides): Promise<string>;

    FEE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    LIQUIDITY_RESERVE(overrides?: CallOverrides): Promise<string>;

    STAKING_TOKEN(overrides?: CallOverrides): Promise<string>;

    TOKE_MANAGER(overrides?: CallOverrides): Promise<string>;

    TOKE_POOL(overrides?: CallOverrides): Promise<string>;

    TOKE_REWARD(overrides?: CallOverrides): Promise<string>;

    TOKE_TOKEN(overrides?: CallOverrides): Promise<string>;

    YIELDY_TOKEN(overrides?: CallOverrides): Promise<string>;

    addRewardsForStakers(
      _amount: BigNumberish,
      _shouldTransfer: boolean,
      _trigger: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    affiliateFee(overrides?: CallOverrides): Promise<BigNumber>;

    canBatchTransactions(overrides?: CallOverrides): Promise<boolean>;

    claim(_recipient: string, overrides?: CallOverrides): Promise<void>;

    claimFromTokemak(
      _recipient: RecipientStruct,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimWithdraw(_recipient: string, overrides?: CallOverrides): Promise<void>;

    coolDownInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        credits: BigNumber;
        expiry: BigNumber;
      }
    >;

    coolDownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolFrom(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolTo(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        duration: BigNumber;
        number: BigNumber;
        timestamp: BigNumber;
        endTime: BigNumber;
        distribute: BigNumber;
      }
    >;

    estimateInstantCurve(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _yieldyToken: string,
      _tokeToken: string,
      _tokePool: string,
      _tokeManager: string,
      _tokeReward: string,
      _liquidityReserve: string,
      _feeAddress: string,
      _curvePool: string,
      _epochDuration: BigNumberish,
      _firstEpochEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    instantUnstakeCurve(
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instantUnstakeReserve(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInstantUnstakingPaused(overrides?: CallOverrides): Promise<boolean>;

    isStakingPaused(overrides?: CallOverrides): Promise<boolean>;

    isUnstakingPaused(overrides?: CallOverrides): Promise<boolean>;

    lastTokeCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

    newFunction(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    preSign(orderUid: BytesLike, overrides?: CallOverrides): Promise<void>;

    rebase(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sendAffiliateFee(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendWithdrawalRequests(overrides?: CallOverrides): Promise<void>;

    setAffiliateAddress(
      _affiliateAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAffiliateFee(
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoolDownPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurvePool(_curvePool: string, overrides?: CallOverrides): Promise<void>;

    setEpochDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeLeftToRequestWithdrawal(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWarmUpPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldPauseInstantUnstaking(
      _shouldPause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldPauseStaking(
      _shouldPause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldPauseUnstaking(
      _shouldPause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeLeftToRequestWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToke(
      _claimAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _amount: BigNumberish,
      _trigger: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAllFromTokemak(overrides?: CallOverrides): Promise<void>;

    warmUpInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        credits: BigNumber;
        expiry: BigNumber;
      }
    >;

    warmUpPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogSetAffiliateAddress(uint256,address)"(
      blockNumber?: BigNumberish | null,
      affilateAddress?: null
    ): LogSetAffiliateAddressEventFilter;
    LogSetAffiliateAddress(
      blockNumber?: BigNumberish | null,
      affilateAddress?: null
    ): LogSetAffiliateAddressEventFilter;

    "LogSetAffiliateFee(uint256,uint256)"(
      blockNumber?: BigNumberish | null,
      fee?: null
    ): LogSetAffiliateFeeEventFilter;
    LogSetAffiliateFee(
      blockNumber?: BigNumberish | null,
      fee?: null
    ): LogSetAffiliateFeeEventFilter;

    "LogSetCoolDownPeriod(uint256,uint256)"(
      blockNumber?: BigNumberish | null,
      period?: null
    ): LogSetCoolDownPeriodEventFilter;
    LogSetCoolDownPeriod(
      blockNumber?: BigNumberish | null,
      period?: null
    ): LogSetCoolDownPeriodEventFilter;

    "LogSetCurvePool(address,int128,int128)"(
      curvePool?: string | null,
      to?: null,
      from?: null
    ): LogSetCurvePoolEventFilter;
    LogSetCurvePool(
      curvePool?: string | null,
      to?: null,
      from?: null
    ): LogSetCurvePoolEventFilter;

    "LogSetEpochDuration(uint256,uint256)"(
      blockNumber?: BigNumberish | null,
      duration?: null
    ): LogSetEpochDurationEventFilter;
    LogSetEpochDuration(
      blockNumber?: BigNumberish | null,
      duration?: null
    ): LogSetEpochDurationEventFilter;

    "LogSetPauseInstantUnstaking(uint256,bool)"(
      blockNumber?: BigNumberish | null,
      shouldPause?: null
    ): LogSetPauseInstantUnstakingEventFilter;
    LogSetPauseInstantUnstaking(
      blockNumber?: BigNumberish | null,
      shouldPause?: null
    ): LogSetPauseInstantUnstakingEventFilter;

    "LogSetPauseStaking(uint256,bool)"(
      blockNumber?: BigNumberish | null,
      shouldPause?: null
    ): LogSetPauseStakingEventFilter;
    LogSetPauseStaking(
      blockNumber?: BigNumberish | null,
      shouldPause?: null
    ): LogSetPauseStakingEventFilter;

    "LogSetPauseUnstaking(uint256,bool)"(
      blockNumber?: BigNumberish | null,
      shouldPause?: null
    ): LogSetPauseUnstakingEventFilter;
    LogSetPauseUnstaking(
      blockNumber?: BigNumberish | null,
      shouldPause?: null
    ): LogSetPauseUnstakingEventFilter;

    "LogSetWarmUpPeriod(uint256,uint256)"(
      blockNumber?: BigNumberish | null,
      period?: null
    ): LogSetWarmUpPeriodEventFilter;
    LogSetWarmUpPeriod(
      blockNumber?: BigNumberish | null,
      period?: null
    ): LogSetWarmUpPeriodEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    COW_RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    COW_SETTLEMENT(overrides?: CallOverrides): Promise<BigNumber>;

    CURVE_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    TOKE_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    TOKE_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    TOKE_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    TOKE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    YIELDY_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardsForStakers(
      _amount: BigNumberish,
      _shouldTransfer: boolean,
      _trigger: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    affiliateFee(overrides?: CallOverrides): Promise<BigNumber>;

    canBatchTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFromTokemak(
      _recipient: RecipientStruct,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWithdraw(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coolDownInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    coolDownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolFrom(overrides?: CallOverrides): Promise<BigNumber>;

    curvePoolTo(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    estimateInstantCurve(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _yieldyToken: string,
      _tokeToken: string,
      _tokePool: string,
      _tokeManager: string,
      _tokeReward: string,
      _liquidityReserve: string,
      _feeAddress: string,
      _curvePool: string,
      _epochDuration: BigNumberish,
      _firstEpochEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instantUnstakeCurve(
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instantUnstakeReserve(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInstantUnstakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isStakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isUnstakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    lastTokeCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

    newFunction(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    preSign(
      orderUid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sendAffiliateFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendWithdrawalRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAffiliateAddress(
      _affiliateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAffiliateFee(
      _affiliateFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCoolDownPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurvePool(
      _curvePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeLeftToRequestWithdrawal(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWarmUpPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldPauseInstantUnstaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldPauseStaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldPauseUnstaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeLeftToRequestWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToke(
      _claimAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _amount: BigNumberish,
      _trigger: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAllFromTokemak(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    warmUpInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    warmUpPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COW_RELAYER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COW_SETTLEMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CURVE_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDITY_RESERVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKE_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKE_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKE_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YIELDY_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardsForStakers(
      _amount: BigNumberish,
      _shouldTransfer: boolean,
      _trigger: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    affiliateFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canBatchTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFromTokemak(
      _recipient: RecipientStruct,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWithdraw(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coolDownInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coolDownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePoolFrom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curvePoolTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateInstantCurve(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakingToken: string,
      _yieldyToken: string,
      _tokeToken: string,
      _tokePool: string,
      _tokeManager: string,
      _tokeReward: string,
      _liquidityReserve: string,
      _feeAddress: string,
      _curvePool: string,
      _epochDuration: BigNumberish,
      _firstEpochEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instantUnstakeCurve(
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instantUnstakeReserve(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInstantUnstakingPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUnstakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTokeCycleIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newFunction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preSign(
      orderUid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendAffiliateFee(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendWithdrawalRequests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAffiliateAddress(
      _affiliateAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAffiliateFee(
      _affiliateFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCoolDownPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurvePool(
      _curvePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeLeftToRequestWithdrawal(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWarmUpPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldPauseInstantUnstaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldPauseStaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldPauseUnstaking(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256,address)"(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeLeftToRequestWithdrawal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToke(
      _claimAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _amount: BigNumberish,
      _trigger: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAllFromTokemak(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    warmUpInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warmUpPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

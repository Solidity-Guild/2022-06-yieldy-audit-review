/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface YieldyStorageInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "MINTER_BURNER_ROLE()": FunctionFragment;
    "REBASE_ROLE()": FunctionFragment;
    "creditBalances(address)": FunctionFragment;
    "index()": FunctionFragment;
    "rebases(uint256)": FunctionFragment;
    "rebasingCredits()": FunctionFragment;
    "rebasingCreditsPerToken()": FunctionFragment;
    "stakingContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_BURNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REBASE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebasingCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebasingCreditsPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_BURNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REBASE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebasingCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebasingCreditsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;

  events: {};
}

export interface YieldyStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldyStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_BURNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REBASE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    creditBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    index(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        epoch: BigNumber;
        rebase: BigNumber;
        totalStakedBefore: BigNumber;
        totalStakedAfter: BigNumber;
        amountRebased: BigNumber;
        index: BigNumber;
        blockNumberOccurred: BigNumber;
      }
    >;

    rebasingCredits(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebasingCreditsPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_BURNER_ROLE(overrides?: CallOverrides): Promise<string>;

  REBASE_ROLE(overrides?: CallOverrides): Promise<string>;

  creditBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  index(overrides?: CallOverrides): Promise<BigNumber>;

  rebases(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      epoch: BigNumber;
      rebase: BigNumber;
      totalStakedBefore: BigNumber;
      totalStakedAfter: BigNumber;
      amountRebased: BigNumber;
      index: BigNumber;
      blockNumberOccurred: BigNumber;
    }
  >;

  rebasingCredits(overrides?: CallOverrides): Promise<BigNumber>;

  rebasingCreditsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_BURNER_ROLE(overrides?: CallOverrides): Promise<string>;

    REBASE_ROLE(overrides?: CallOverrides): Promise<string>;

    creditBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    rebases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        epoch: BigNumber;
        rebase: BigNumber;
        totalStakedBefore: BigNumber;
        totalStakedAfter: BigNumber;
        amountRebased: BigNumber;
        index: BigNumber;
        blockNumberOccurred: BigNumber;
      }
    >;

    rebasingCredits(overrides?: CallOverrides): Promise<BigNumber>;

    rebasingCreditsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_BURNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REBASE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    creditBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    rebases(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebasingCredits(overrides?: CallOverrides): Promise<BigNumber>;

    rebasingCreditsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_BURNER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REBASE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebasingCredits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebasingCreditsPerToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

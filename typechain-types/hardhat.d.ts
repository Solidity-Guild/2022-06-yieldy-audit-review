/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BatchRequests",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchRequests__factory>;
    getContractFactory(
      name: "LiquidityReserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityReserve__factory>;
    getContractFactory(
      name: "LiquidityReserveStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityReserveStorage__factory>;
    getContractFactory(
      name: "Migration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migration__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "StakingStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingStorage__factory>;
    getContractFactory(
      name: "CowSwapTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CowSwapTest__factory>;
    getContractFactory(
      name: "LiquidityReserveV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityReserveV2Test__factory>;
    getContractFactory(
      name: "StakingV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingV2Test__factory>;
    getContractFactory(
      name: "YieldyV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldyV2Test__factory>;
    getContractFactory(
      name: "Vesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vesting__factory>;
    getContractFactory(
      name: "Yieldy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Yieldy__factory>;
    getContractFactory(
      name: "YieldyStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldyStorage__factory>;
    getContractFactory(
      name: "ICowSettlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICowSettlement__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "ILiquidityReserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityReserve__factory>;
    getContractFactory(
      name: "IRewardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardToken__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IStakingV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingV1__factory>;
    getContractFactory(
      name: "ITokeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokeManager__factory>;
    getContractFactory(
      name: "ITokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokePool__factory>;
    getContractFactory(
      name: "ITokeReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokeReward__factory>;
    getContractFactory(
      name: "IVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVesting__factory>;
    getContractFactory(
      name: "IYieldy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldy__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BatchRequests",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchRequests>;
    getContractAt(
      name: "LiquidityReserve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityReserve>;
    getContractAt(
      name: "LiquidityReserveStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityReserveStorage>;
    getContractAt(
      name: "Migration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migration>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "StakingStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingStorage>;
    getContractAt(
      name: "CowSwapTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CowSwapTest>;
    getContractAt(
      name: "LiquidityReserveV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityReserveV2Test>;
    getContractAt(
      name: "StakingV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingV2Test>;
    getContractAt(
      name: "YieldyV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldyV2Test>;
    getContractAt(
      name: "Vesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vesting>;
    getContractAt(
      name: "Yieldy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Yieldy>;
    getContractAt(
      name: "YieldyStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldyStorage>;
    getContractAt(
      name: "ICowSettlement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICowSettlement>;
    getContractAt(
      name: "ICurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "ILiquidityReserve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityReserve>;
    getContractAt(
      name: "IRewardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardToken>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IStakingV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingV1>;
    getContractAt(
      name: "ITokeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokeManager>;
    getContractAt(
      name: "ITokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokePool>;
    getContractAt(
      name: "ITokeReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokeReward>;
    getContractAt(
      name: "IVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVesting>;
    getContractAt(
      name: "IYieldy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldy>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
